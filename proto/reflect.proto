syntax = "proto3";

package l8reflect;

option java_multiple_files = true;
option java_outer_classname = "L8Reflect";
option java_package = "com.types.l8reflect";
option go_package = "./types/l8reflect";

message L8Node {
  // The type name, in case of a map, this is the value type.
  string type_name = 1;
  // In case this attribute is a cell in a map or a slice, this is the key type
  string key_type_name = 2;
  // The parent node, nil if root.
  L8Node parent = 3;
  // The attribute name in the parent
  string field_name = 4;
  // In case this attribute is a struct, a map between the attribute name and the child registry node.
  map<string, L8Node> attributes = 5;
  // If this attribute is a map
  bool is_map = 6;
  // If this attribute is a slice
  bool is_slice = 7;
  //The cached key so we won't need to calculate it all the time.
  string cached_key = 8;
  //Decorators
  map<int32, string> decorators = 9;
  // If the attribute is struct or map/slice to struct.
  bool is_struct = 10;
}

message L8TableView {
  L8Node  table = 1;
  repeated L8Node columns = 2;
  repeated L8Node sub_tables = 3;
}

enum L8DecoratorType {
  Invalid = 0;
  Primary = 1;
  Unique = 2;
  NonUnique = 3;
  Title = 4;
  Editor = 5;
  NoNestedInspection = 6;
  Ignore = 7;
  IgnoreAttr = 8;
  AlwaysFull = 9;
}