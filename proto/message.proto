syntax = "proto3";

package types;

option java_multiple_files = true;
option java_outer_classname = "Types";
option java_package = "com.shared.types";
option go_package = "./types";

// The action the message will invoke on the handler
enum Action {
  Invalid_Action = 0;
  POST = 1;
  PUT = 2;
  PATCH = 3;
  DELETE = 4;
  GET = 5;
  Reply = 6;
  Notify = 7;
}

// The priority of the message
enum Priority {
  P8 = 0;
  P7 = 1;
  P6 = 2;
  P5 = 3;
  P4 = 4;
  P3 = 5;
  P2 = 6;
  P1 = 7;
}

/*
  Message is to transmit a piece of data, securely, from one process to one or more processes via
  Publish/Subscribe or Reuest/Reply
 */
message Message {
  // The source uuid identifier of the message sender
  string source = 1;
  // The source uuid identifier of the message sender vnet
  string source_vnet = 2;
  // The Destination Uuid
  string destination = 3;
  // The attn service name (e.g. topic)
  string service_name = 4;
  // The service area of the message, like ospf area
  int32 service_area = 5;
  // To uniquely identify the source message, sequence + source = unique message id.
  int32 sequence = 6;
  // Priority of this Message for the handler callback.
  Priority priority = 7;
  // The protobuf marshaled data, encoded to base64 string
  string data = 8;
  // The type name of the serialized data
  string proto_type = 9;
  // Action to invoke with this data on the service point
  Action action = 10;
  // timeout when request/reply
  int64 timeout = 11;
  // If this a fail notification, what is the failing info
  string fail_msg = 12;
  // If this message needs a sync request
  bool is_request = 13;
  // If this message a reply for a sync request
  bool is_reply = 14;
  // If this message part of a vnet transaction, the transaction data
  Transaction tr = 15;
}

enum TransactionState {
  Invalid_Transaction_State = 0;
  Create = 1;
  Created = 2;
  Start = 3;
  Lock = 4;
  Locked = 5;
  LockFailed = 6;
  Commit = 7;
  Commited = 8;
  Rollback = 9;
  Rollbacked = 10;
  Finish = 11;
  Finished = 12;
  Errored = 13;
}

message Transaction {
  string id = 1;
  TransactionState state = 2;
  string error = 3;
  int64 start_time = 4;
}

message Response {
  repeated bytes list = 1;
  string errMsg = 2;
}

message GSQL {
  string query = 1;
  string type = 2;
}

// A config for the messages limitation and data size
message VNicConfig {
  // The maximum data size for a message
  uint64 max_data_size = 1;
  // The transmit message queue size
  uint64 tx_queue_size = 2;
  // The received message queue size
  uint64 rx_queue_size = 3;
  // What is the switch port for this configuration
  uint32 vnet_port = 4;
  // The local uuid
  string local_uuid = 5;
  // The remote uuid
  string remote_uuid = 6;
  // The address of the connection initiator, regardless of the side.
  string address = 7;
  // force external mode in case two switches are on the same machine
  // woth different ports
  bool force_external = 8;
  // Custom local alias for this vnic
  string local_alias = 9;
  // Custom remote alias for this vnic
  string remote_alias = 10;
  // Provided services
  Services services = 11;
  //Keep Alive interval in Seconds
  int64 keep_alive_interval_seconds = 12;
}

message Services {
  map<string, ServiceAreas> service_to_areas = 1;
}

message ServiceAreas {
  map<int32, ServiceAreaInfo> areas = 1;
}

message ServiceAreaInfo {
  int32 score = 1;
}

enum HealthState {
  Invalid_State = 0;
  Up = 1;
  Down = 2;
  Unreachable = 3;
}

message HealthPoint {
  string a_uuid = 1;
  string z_uuid = 2;
  string alias = 3;
  Services services = 4;
  HealthState status = 5;
  HealthPointStats stats = 6;
  int64 start_time = 7;
  bool is_vnet = 8;
}

message HealthPointStats {
  int64 last_msg_time = 1;
  int64 tx_msg_count = 2;
  int64 tx_data_count = 3;
  int64 rx_msg_count = 4;
  int64 rx_data_cont = 5;
  uint64 memory_usage = 6;
  double cpu_usage = 7;
}